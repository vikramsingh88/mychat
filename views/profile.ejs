<!DOCTYPE html>
<html>

<head>
  <link data-require="bootstrap@4.0.5" data-semver="4.0.5" rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" />
  <script data-require="bootstrap@4.0.5" data-semver="4.0.5" src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.5/js/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="css/jquery.emojipicker.css">
  <script type="text/javascript" src="https://code.jquery.com/jquery-1.11.2.min.js"></script>
  <script type="text/javascript" src="js/jquery.emojipicker.js"></script>

  <!-- Emoji Data -->
  <link rel="stylesheet" type="text/css" href="css/jquery.emojipicker.tw.css">
  <script type="text/javascript" src="js/jquery.emojis.js"></script>
  <style>
    body {
      padding-top: 0px;
      font-size: 16px;
      background: transparent;
    }

    html {
      background-color:  #e0e4e0 !important;
    }

    ul li {
        color: limegreen;
        list-style-type: disc;
        margin-left: 0em;
      }

      .unread{
        background: red;
        list-style-type: disc;
      }


      ul li span {
        color: black;
      }

    #chatWindow{
        display:none;
    }

 .whisper{
  /* color: #0e492d;*/
   color: #845422;
   font-style:italic;
   font-weight: bold;
 }

 .error{
   color:#800000;
 }
    
    header h1 {
      text-align: center;
    }
    
    #profile-pic {
      float: left;
      margin-left: 30px;
      width: 90px;
      height: 90px;
      border-radius: 50%;
      background: #bebebf;
    }
    
    .f-list {
      background: #bebebf;
      border: 1px solid #bebebf;
      border-radius: 5px 0px 0px 5px;
      padding: 0;
      overflow: auto;
    }
    
    .chatbox {
      background: white;
      border: 1px solid #bebebf;
      border-radius: 0px 5px 5px 0px;
      padding: 0;
    }
    
    #dp {
      width: 30px;
      height: 30px;
      background: #bebebf;
      margin-right: 6px;
      border-radius: 50%;
    }
    
    .sendbar{
      background: #ececec;
      padding: 10px;
      border-radius:0px 0px 5px 0px;
    }
    
    .inputmsg{
      min-width: 85%;
      margin-right: 20px;
    }
    .typing{
      min-width: 85%;
      height: 10px;
      margin-right: 20px;
    }
    
    #msg-area{
      background: #f7f7f7;
    }
    #f-name{
      width: 100%;
      height: 55px;
      border-radius: 0px 5px 0px 0px;
      text-align: center;
      padding:15px;
    }
  </style>
</head>

<body>
  <header>
    <br>
    <div id='profile-pic' style="background-image: url(/images/avatar.jpg);"></div>
    <h1><%= chatname %></h1>
    <br>
  </header>
  <div class="row">    
    <div class="col-md-12">
      <div class="row">        
        <div class="col-md-2 f-list" id="user_list_div">
          <ul id="users" class="list-group"></ul>
        </div>
        <div class="col-md-9 chatbox">
          <div id='f-name' style="background: #e6ccff"></div>
          <div id='msg-area'>
            <div id="contentWrap" >
                  <div id="chatWrap" style=" border-radius: 10px;min-height: 400px;max-height: 400px;overflow-y: scroll;">
                      <div id="chat"></div>
                  </div>
               </div>
          </div>
          <form id="message-box">
            <div class="form-inline sendbar">
              <p align="center" class='typing' id="typing"> </p><br/>
              <input type="text" class='form-control inputmsg' id="message"/>
              <button type="submit" class="btn btn-default">Send</button>
            </div>
          </form>
        </div>
      </div>
    </div>
    <!--<div class="col-md-2" id="count" style="width: 200px; height: 400px; overflow-y: scroll;">
      
    </div>-->
  </div>

  
  <script src="/socket.io/socket.io.js"></script>
  <script>
    jQuery(function($){
      var socket=io.connect();
      var $users=$('#users');
       var $messageForm=$('#message-box');
       var $messageBox=$('#message');
       var $chat=$('#chat');

       var chatOuter=$('#chatWrap');
       var chatInner=$('#chat');
       var buddy = '';

       var user_msg = {};
       var user_msg_map = [];
       var conversation_id;
       $('#message').emojiPicker();
       $('#message').keydown(function(event) {
          if (event.keyCode == 13) {
               $(this.form).submit()
              return false;
             }
       });

      var chatname = '<%= chatname %>';
      socket.emit('new user',chatname, function(data) {
                
      });

      //create user list dynamically and add element id
      var addBuddyToList= function(buddy) {
          var ul = document.getElementById("users");
          var li = document.createElement("li");
          li.setAttribute("id", buddy);
          li.setAttribute("class", "list-group-item");

          li.appendChild(document.createTextNode(buddy));
          ul.appendChild(li)
      }

       socket.on('chatusers',function(data){
            $('ul li').remove();
            //var html='<ul class="list-group">';
            for(i=0;i<data.length;i++){
              addBuddyToList(data[i]);
            }
            //html=html+'</ul>';
            //$users.html(html);
            $('ul.list-group li').click(function(e) 
              { 
                buddy = $(this).text();
                $("#chat").empty();
                var thirdItem = document.getElementById(buddy);
                thirdItem.setAttribute("class", "list-group-item");
                /*var flag = false
                //conversation_id = chatname+"_"+buddy;
                for(i = 0 ; i < user_msg_map.length; i++){
                    var temp = user_msg_map[i];
                    flag = temp.hasOwnProperty(conversation_id);    
                    if (flag) {
                      break;
                    }                
                  }

                  if (!flag) {
                    var obj = {};
                    obj[conversation_id] = [];
                      user_msg_map.push(obj);
                  }

                  console.log(JSON.stringify(user_msg_map));*/

                $('#f-name').text(buddy);
                var m = user_msg[buddy];
                console.log("m :",m);
                  if(m != null){  
                    for(i = 0;i<m.length;i++) {                  
                     // $chat.append("<p align='left' class='whisper'><b>&nbsp;&nbsp;&nbsp;"+buddy+" : </b>"+m[i]+"</p><br/>");
                      console.log('Inside for loop');
                      scrollCorrect();
                    } 
                  } 

                  var tempChatId1 = chatname+"_"+buddy; 
                  var tempChatId2 = buddy+"_"+chatname; 
                  var myChatId; 
                  for(i = 0 ; i < user_msg_map.length; i++){
                      var temp = user_msg_map[i];
                      //console.log("tempChatId1",tempChatId1);
                      //console.log("tempChatId2",tempChatId2);
                      console.log("tempChatId1 Property",temp.hasOwnProperty(tempChatId1));
                      console.log("tempChatId2 Property",temp.hasOwnProperty(tempChatId2));
                      if (temp.hasOwnProperty(tempChatId1)) {
                          myChatId = tempChatId1;
                      }else if (temp.hasOwnProperty(tempChatId2)) {
                        myChatId = tempChatId2;
                      }else {
                        myChatId = tempChatId1;
                      }
                      flag = temp.hasOwnProperty(tempChatId1) || temp.hasOwnProperty(tempChatId2);    
                      if (flag) {
                        break;
                      }                
                    }
                  for(i = 0 ; i < user_msg_map.length; i++){
                      var temp = user_msg_map[i];
                      //{"vikram_puja":[]}
                      console.log("conversation_id on list item click ",myChatId);
                      var chatID = myChatId;
                      var map = temp[chatID];
                      console.log('Map',map);
                      if (typeof map != 'undefined') {
                        for(x=0;x<map.length;x++){
                          var m = map[x];
                          if(m[buddy]!=null){
                            $chat.append("<p align='left' class='whisper'><b>&nbsp;&nbsp;&nbsp;"+buddy+" : </b>"+m[buddy]+"</p><br/>");
                          }else if(m[chatname]!=null){
                            $chat.append("<p align='right' class='whisper'><b>"+chatname+": </b>"+m[chatname]+"&nbsp;&nbsp;</p><br/>");
                          }
                        }         
                        break;
                      }                
                    }

                  delete user_msg[buddy];
                  console.log("in list loop :",user_msg);
              });
        });

       //key press event to know typing indication
       $( "#message").keydown(function() {
          socket.emit('keydown-client', {'buddy':buddy,'loginuser':chatname});
       });

       socket.on('keydown-server', function(data) {
          if(data.from == buddy) {
            $("#typing").text(data.from+" is typing ...");
          }
       });

       $( "#message").keyup(function() {
          socket.emit('keyup-client', {'buddy':buddy,'loginuser':chatname});
       });

       socket.on('keyup-server', function(data) {
          if(data.from == buddy) {
            $("#typing").text("");
          }
       });



       $messageForm.submit(function(e){
            e.preventDefault();
            var flag = false    
            var tempChatId1 = chatname+"_"+buddy; 
            var tempChatId2 = buddy+"_"+chatname; 
            var myChatId;
            if(user_msg_map.length > 0){  
                for(i = 0 ; i < user_msg_map.length; i++){
                    var temp = user_msg_map[i];
                    //console.log("tempChatId1",tempChatId1);
                    //console.log("tempChatId2",tempChatId2);
                    console.log("tempChatId1 Property",temp.hasOwnProperty(tempChatId1));
                    console.log("tempChatId2 Property",temp.hasOwnProperty(tempChatId2));
                    if (temp.hasOwnProperty(tempChatId1)) {
                        myChatId = tempChatId1;
                    }else if (temp.hasOwnProperty(tempChatId2)) {
                      myChatId = tempChatId2;
                    }else {
                      myChatId = tempChatId1;
                    }
                    flag = temp.hasOwnProperty(tempChatId1) || temp.hasOwnProperty(tempChatId2);    
                    if (flag) {
                      break;
                    }                
                  }
            } else {
              myChatId = tempChatId1;
            }
            socket.emit('send message',{msg:$messageBox.val(),buddy:buddy,chatname:chatname,conversation_id:myChatId},function(data){
              $chat.append("<p align='right' class='error'>"+data+"&nbsp;&nbsp;</p><br/>");
              scrollCorrect();
            });
            $messageBox.val('');
       });

       socket.on('whisper',function(data){
        console.log("conversation_id : "+data.conversation_id);
        conversation_id = data.conversation_id;
        var flag = false        
        for(i = 0 ; i < user_msg_map.length; i++){
            var temp = user_msg_map[i];
            flag = temp.hasOwnProperty(data.conversation_id);    
            if (flag) {
              break;
            }                
          }

          if (!flag) {
            var obj = {};
            obj[data.conversation_id] = [];
              user_msg_map.push(obj);
          }

         for(i = 0 ; i < user_msg_map.length; i++){
              var temp = user_msg_map[i];
              //{"vikram_puja":[]}
              var chatID = data.conversation_id;//chatname+"_"+buddy;
              var map = temp[chatID];
              console.log('Map',map);
              if (typeof map != 'undefined') {
                var obj={};
                obj[data.chatname] = data.msg;
                map.push(obj);   
                //console.log('temp',temp);               
                break;
              }                
            }

            console.log('user_msg_map',user_msg_map);

         if(!(data.chatname in user_msg)){
            user_msg[data.chatname] = [data.msg];
          } else{
            user_msg[data.chatname].push(data.msg);
          }
        if (buddy===data.chatname) {
          //$("#count").empty();
          $chat.append("<p align='left' class='whisper'><b>&nbsp;&nbsp;&nbsp;"+data.chatname+" : </b>"+data.msg+"</p><br/>"); 
          $("#typing").text("");
           scrollCorrect();
        } else {
            //$("#count").append("<p><b>"+"Unread message from "+data.chatname+" </b>"+"</p><br/>");
             var thirdItem = document.getElementById(data.chatname);
             thirdItem.setAttribute("class", "list-group-item unread");
        }  
        console.log("on receive : ",user_msg);    
       });

       socket.on('private',function(data){
           $chat.append("<p align='right' class='whisper'><b>"+data.chatname+": </b>"+data.msg+"&nbsp;&nbsp;</p><br/>");
            conversation_id = data.conversation_id;
            var flag = false        
            for(i = 0 ; i < user_msg_map.length; i++){
                var temp = user_msg_map[i];
                flag = temp.hasOwnProperty(data.conversation_id);    
                if (flag) {
                  break;
                }                
              }

              if (!flag) {
                var obj = {};
                obj[data.conversation_id] = [];
                  user_msg_map.push(obj);
              }

             for(i = 0 ; i < user_msg_map.length; i++){
                  var temp = user_msg_map[i];
                  //{"vikram_puja":[]}
                  var chatID = data.conversation_id;//chatname+"_"+buddy;
                  var map = temp[chatID];
                  console.log('Map',map);
                  if (typeof map != 'undefined') {
                    var obj={};
                    obj[data.chatname] = data.msg;
                    map.push(obj);   
                    //console.log('temp',temp);               
                    break;
                  }                
                }

            console.log('user_msg_map',user_msg_map);
           scrollCorrect();
       });

       function scrollCorrect(){
             chatOuter.scrollTop(chatInner.outerHeight());
      }
    });

  </script>

</body>

</html>